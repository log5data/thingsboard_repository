{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "trendz_bundle.trendz_view",
    "name" : "Trendz View",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 9.5,
      "sizeY" : 6.5,
      "resources" : [ ],
      "templateHtml" : "<iframe id='123' class=\"iFrameWindo\"\n        *ngIf=\"finalIframeUrl\"\n>\n    Your browser doesn't support iFrames.\n</iframe>\n\n<div *ngIf=\"!finalIframeUrl\" class=\"center-scree\">Trendz View with filter alias</div>\n\n<div class=\"iFrameEdit\" *ngIf=\"ctx.isEdit\">\n    \n</div>",
      "templateCss" : ".iFrameWindo {\n    border: 0; \n    width: 100%; \n    height: 100%\n}\n\n.iFrameEdit {\n    border: 0; \n    width: 100%; \n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n\n.center-scree {\n    width: 100%; \n    height: 100%;\n    border: 0; \n    text-align: center;\n    font-size: 40px;\n}",
      "controllerScript" : "let $scope;\nlet $sce;\nlet userService;\nlet $timeout;\nlet settings;\nlet startTime = 0;\nlet endTime = 0;\n\nlet prevFilterValue;\n\nlet usePostMessage = false;\t\nlet transferFinished = false;\t\nlet postCommandId = 0;\t\nlet skipFirstUpdate = false;\n\nself.onInit = function() {\n    $scope = self.ctx.$scope;\n    $scope.ctx = self.ctx;\n\n    settings = JSON.parse(JSON.stringify(self.ctx.settings)) || {};\n    $scope.originalIframeUrl = settings.viewUrl;\n    $scope.filterName = settings.filterName;\n\n    if (settings.useDashboardTimeWindow) {\n        self.ctx.dashboard.dashboardTimewindowChangedSubject.subscribe(ll => {\n            refreshData();\n        });\n    }\n\n    listenForChildMsgs();\n    self.onResize();\n    //self.onDataUpdated();\n}\n\nself.actionSources = function() {\t\n    return {\t\n        'rowClick': {\t\n            name: 'widget-action.row-click',\t\n            multiple: false\t\n        }\t\n    };\n}\n\nself.onDataUpdated = function() {\n    $scope.filterValue = readFilterValues();\n    \n    if(prevFilterValue === $scope.filterValue) {\n        return;\n    }\n    prevFilterValue = $scope.filterValue;\n    \n    refreshData();\n\n}\n\nself.onResize = function() {\n\n}\n\nself.onDestroy = function() {\n\n}\n\nfunction refreshData() {\n    if($scope.originalIframeUrl === 'http://localhost:4200/viewMode/{id}/') {\n        return;\n    }\n\n    $scope.filterValue = readFilterValues();\n\n    prevFilterValue = $scope.filterValue;\n    \n    updateTimeRange();\n    buildViewUrl();\n    \n    setTimeout(() => {}, 0);\n}\n\nfunction buildViewUrl() {\n    $scope.additionalParams = '';\n    let filterObj;\n    if ($scope.filterValue && $scope.filterValue !== 'Unresolved') {\n        if(usePostMessage) {\t\n            postCommandId = Math.random() * (1000);\t\n            $scope.additionalParams = 'postFilter=' + postCommandId + '&';\t\n            console.log('new view URL', postCommandId);\t\n            filterObj = {};\t\n            filterObj[$scope.filterName] = $scope.filterValue;\t\n        } else {\n            $scope.additionalParams = `${$scope.filterName}=${$scope.filterValue}&`;\n        }\n    }\n\n    $scope.tokenParam = getTokenUrlParams();\n    if($scope.originalIframeUrl && $scope.originalIframeUrl !== 'http://localhost:4200/viewMode/{id}/') {\n        $scope.finalIframeUrl = $scope.originalIframeUrl + `?${$scope.additionalParams}${$scope.tokenParam}`;\n    }\n    if (settings.useDashboardTimeWindow && startTime !== 0 && endTime !== 0) {\n        $scope.finalIframeUrl = $scope.finalIframeUrl + '&startTs=' + startTime + \"&endTs=\" + endTime;\n    }\n\n    setTimeout(() => {\n        iframe = self.ctx.$container.find('iframe');\n        iframe.attr('src',$scope.finalIframeUrl);\n    }, 10);\n    \n    transferFinished = false;\t\n    console.log('buildViewUrl');\t\n    if(filterObj && usePostMessage) {\t\n        sendDataToiFrame(filterObj, 100);\t\n    }\t\n    if(settings.serverAliasResove) {\t\n        let alias = self.ctx.defaultSubscription.configuredDatasources[0].entityFilter;\t\n        sendDataToiFrame(alias, 100);\t\n    }\n}\n\nfunction listenForChildMsgs() {\t\n    window.addEventListener('message', function(e) {\t\n        if (e.data && e.data.type === 'trndChildMsgConfirm') {\t\n            console.log('confirmation from Child iFrame received', e.data);\t\n            if(postCommandId === e.data.cmdId) {\t\n                transferFinished = true;\t\n            }\t\n        } else if(e.data && e.data.type === 'entityItemSelected') { \t\n            let rowClickDescriptors = $scope.ctx.actionsApi.getActionDescriptors('rowClick');\t\n            console.log('child entity selected', e.data, rowClickDescriptors);  \t\n            if (rowClickDescriptors.length) {\t\n                let entityId = e.data.innerData.entityId;\t\n                let entityName = e.data.innerData.entityName;\t\n                if (entityId) {\t\n                    setTimeout(() => {\t\n                        console.log('descriptor called', entityId, entityName);\t\n                        $scope.ctx.actionsApi.handleWidgetAction(null, rowClickDescriptors[0], entityId, entityName);\t\n                    }, 0);\t\n                }\t\n            }\t\n        } else {\t\n            console.log('child strange', e.data);\t\n        }\t\n    });\t\n}\t\n\nfunction sendDataToiFrame(innerData, timeout) {\t\n    let msg = {innerData: innerData, type:'trndParentMsg', cmdId: postCommandId};\t\n    setTimeout(() => {\t\n        if(transferFinished) {\t\n          return;\t\n        }\t\n        iframe = self.ctx.$container.find('iframe');\t\n        if(iframe && iframe[0] && iframe[0].contentWindow) {\t\n            iframe[0].contentWindow.postMessage(msg, '*');\t\n            // transferFinished = true;\t\n            console.log('send finished ', +postCommandId, iframe);\t\n            sendDataToiFrame(innerData, 200);\t\n        } else {\t\n            console.log('repeat send', iframe);\t\n            sendDataToiFrame(innerData, 100);\t\n        }\t\n    }, timeout);\t\n}\n\nfunction getTokenUrlParams() {\n    let jwtToken = localStorage.getItem('jwt_token');\n    if(jwtToken) {\n        jwtToken = jwtToken.replaceAll('\"', \"\");\n    }\n    \n    let refrToekn = localStorage.getItem('refresh_token');\n    if(refrToekn) {\n        refrToekn = refrToekn.replaceAll('\"', \"\");\n    }\n    \n    return 'token=' + jwtToken + '&refreshToken=' + refrToekn;\n}\n\nfunction readFilterValues() {\n    if(self.ctx && self.ctx.defaultSubscription && self.ctx.defaultSubscription.data && self.ctx.defaultSubscription.data.length > 0) {\n        let filterValues = [];\n        for(let i = 0; i<self.ctx.defaultSubscription.data.length; i++ ) {\n            let value = getDescendantProp(self.ctx.defaultSubscription.data[i], 'data.0.1');\n            if (value && value !== 'Unresolved') {\n                filterValues.push(value);\n            }\n        }\n        if(filterValues.length) {\n            if(filterValues.length > 50) {\n                usePostMessage = true;\n            }\n            return filterValues.join(\"~\");\n        }\n        usePostMessage = false;\n    } else {\n        console.log('trndz filter data blank', self.ctx.defaultSubscription);\n        usePostMessage = false;\n        return null;\n    }\n}\n\nfunction updateTimeRange() {\n    let timeWindow = $scope.ctx.dashboard.dashboardTimewindow;\n    if (timeWindow.realtime) {\n        startTime = Date.now() - timeWindow.realtime.timewindowMs;\n        endTime = Date.now();\n    } else if (timeWindow.history) {\n        if (timeWindow.history.fixedTimewindow && timeWindow.history.historyType === 1) {\n            startTime = timeWindow.history.fixedTimewindow.startTimeMs;\n            endTime = timeWindow.history.fixedTimewindow.endTimeMs;\n        } else if (timeWindow.history.timewindowMs && timeWindow.history.historyType === 0) {\n            startTime = Date.now() - timeWindow.history.timewindowMs;\n            endTime = Date.now();\n        }\n    }\n}\n\nfunction getDescendantProp(obj, path) {\n    return path.split('.').reduce((acc, part) => acc && acc[part], obj)\n}",
      "settingsSchema" : "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"EntitiesTableSettings\",\n        \"properties\": {\n            \"viewUrl\": {\n                \"title\": \"View URL\",\n                \"type\": \"string\",\n                \"default\": \"http://localhost:4200/viewMode/{id}/\"\n            },\n            \"filterName\": {\n                \"title\": \"Filter name\",\n                \"type\": \"string\",\n                \"default\": \"\"\n            },\n            \"useDashboardTimeWindow\": {\n                \"title\": \"Use Dashboard Time Window\",\n                \"type\": \"boolean\",\n                \"default\": false\n            },\n             \"serverAliasResove\": {\n                \"title\": \"Resove alias on server\",\n                \"type\": \"boolean\",\n                \"default\": false\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"viewUrl\",\n        \"filterName\",\n        \"useDashboardTimeWindow\",\n        \"serverAliasResove\"\n    ]\n}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"entityAliasId\":null,\"dataKeys\":[{\"name\":\"f(x)\",\"type\":\"function\",\"label\":\"Random\",\"color\":\"#2196f3\",\"settings\":{},\"_hash\":0.09108824237722413,\"funcBody\":\"var value = prevValue + Math.random() * 100 - 50;\\nvar multiplier = Math.pow(10, 2 || 0);\\nvar value = Math.round(value * multiplier) / multiplier;\\nif (value < -1000) {\\n\\tvalue = -1000;\\n} else if (value > 1000) {\\n\\tvalue = 1000;\\n}\\nreturn value;\"}]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{\"viewUrl\":\"http://localhost:4200/viewMode/{id}/\"},\"title\":\"Trendz View\"}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "9fa2cdf0-2248-11ed-83d3-77b7b1eedcae"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}