{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "demo_custom_widgets.update_entity_attribute",
    "name" : "Update entity attribute",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "latest",
      "sizeX" : 7.5,
      "sizeY" : 4.5,
      "resources" : [ ],
      "templateHtml" : "<form #attrUpdateForm=\"ngForm\" class=\"mat-padding attribute-update-form\">\n  <div class=\"entity-title\">\n    {{entityName}}\n  </div>\n  <mat-form-field *ngIf=\"entityDetected\" class=\"mat-block\">\n    <mat-label>Attribute</mat-label>\n    <input matInput required name=\"attribute\" #attribute=\"ngModel\" [(ngModel)]=\"model.key\"/>\n    <mat-error *ngIf=\"attribute.hasError('required')\">\n      Entity attribute is required\n    </mat-error>\n  </mat-form-field>\n  <section fxLayout=\"row\" fxLayoutGap=\"8px\" *ngIf=\"entityDetected\">\n    <mat-form-field fxFlex=\"40\" class=\"mat-block tb-value-type\">\n      <mat-label>Value type</mat-label>\n      <mat-select matInput name=\"valueType\" #valueType=\"ngModel\" [(ngModel)]=\"model.type\" (ngModelChange)=\"onValueTypeChanged()\">\n        <mat-select-trigger>\n          <mat-icon svgIcon=\"{{ valueTypes[model.type].icon }}\"></mat-icon>\n          <span>{{ valueTypes[model.type].name }}</span>\n        </mat-select-trigger>\n        <mat-option *ngFor=\"let valueType of valueTypeKeys\" [value]=\"valueType\">\n          <mat-icon svgIcon=\"{{ valueTypes[valueType].icon }}\"></mat-icon>\n          <span>{{ valueTypes[valueType].name }}</span>\n        </mat-option>\n      </mat-select>\n      <mat-error *ngIf=\"valueType.hasError('required')\">\n        Attribute value type is required\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field *ngIf=\"model.type === 'string'\" fxFlex=\"60\" class=\"mat-block\">\n      <mat-label>String value</mat-label>\n      <input matInput required name=\"value\" #value=\"ngModel\" [(ngModel)]=\"model.value\"/>\n      <mat-error *ngIf=\"value.hasError('required')\">\n        Attribute value is required.\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field *ngIf=\"model.type === 'integer'\" fxFlex=\"60\" class=\"mat-block\">\n      <mat-label>Integer value</mat-label>\n      <input matInput required name=\"value\" type=\"number\" step=\"1\" pattern=\"^-?[0-9]+$\" #value=\"ngModel\" [(ngModel)]=\"model.value\"/>\n      <mat-error *ngIf=\"value.hasError('required')\">\n        Attribute value is required.\n      </mat-error>\n      <mat-error *ngIf=\"value.hasError('pattern')\">\n        Invalid integer value\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field *ngIf=\"model.type === 'double'\" fxFlex=\"60\" class=\"mat-block\">\n      <mat-label>Double value</mat-label>\n      <input matInput required name=\"value\" type=\"number\" step=\"any\" #value=\"ngModel\" [(ngModel)]=\"model.value\"/>\n      <mat-error *ngIf=\"value.hasError('required')\">\n        Attribute value is required.\n      </mat-error>\n    </mat-form-field>\n    <div fxLayout=\"column\" fxLayoutAlign=\"center\" fxFlex=\"60\" *ngIf=\"model.type === 'boolean'\">\n      <mat-checkbox name=\"value\" #value=\"ngModel\" [(ngModel)]=\"model.value\" style=\"margin-bottom: 0px;\">\n        {{ model.value ? 'True' : 'False' }}\n      </mat-checkbox>\n    </div>\n  </section>\n  <button mat-raised-button color=\"primary\"\n          *ngIf=\"entityDetected\"\n          type=\"button\"\n          (click)=\"updateAttribute($event)\"\n          [disabled]=\"(isLoading$ | async) || attrUpdateForm.invalid || !attrUpdateForm.dirty\">\n    Update server attribute\n  </button>\n</form>",
      "templateCss" : ".attribute-update-form {\n    overflow-y: auto;\n    height: 100%;\n}\n\n.entity-title {\n    font-weight: bold;\n    font-size: 22px;\n    padding-top: 12px;\n    padding-bottom: 6px;\n    color: #666;\n}\n\n.mat-form-field.tb-value-type .mat-form-field-infix {\n      padding-bottom: 1px;\n}\n  \n.mat-form-field.tb-value-type .mat-select-trigger .mat-icon {\n    vertical-align: middle;\n    margin-right: 16px;\n}\n",
      "controllerScript" : "const valueTypes = {\n    string: {\n        value: \"string\",\n        name: \"String\",\n        icon: \"mdi:format-text\"\n    },\n    integer: {\n        value: \"integer\",\n        name: \"Integer\",\n        icon: \"mdi:numeric\"\n    },\n    double: {\n        value: \"double\",\n        name: \"Double\",\n        icon: \"mdi:numeric\"\n    },\n    boolean: {\n        value: \"boolean\",\n        name: \"Boolean\",\n        icon: \"mdi:checkbox-marked-outline\"\n    }\n};\n\nself.onInit = function() {\n    self.ctx.ngZone.run(function() {\n       init(); \n       self.ctx.detectChanges(true);\n    });\n}\n\nfunction init() {\n        \n    self.ctx.$scope.entityName = \"No entity selected\";\n    self.ctx.$scope.valueTypes = valueTypes;\n    self.ctx.$scope.valueTypeKeys = Object.keys(valueTypes);\n    \n    self.ctx.$scope.model = { \n        type: 'string',\n        key: '',\n        value: ''\n    };\n    \n    if (self.ctx.datasources && self.ctx.datasources.length) {\n        var datasource = self.ctx.datasources[0];\n        if (datasource.type === 'entity') {\n            if (datasource.entityType && datasource.entityId) {\n                self.ctx.$scope.entityName = datasource.entityName;\n                self.ctx.$scope.entityDetected = true;\n            }\n        }\n    }\n    \n    self.ctx.$scope.onValueTypeChanged = function() {\n        if (self.ctx.$scope.model.type === 'boolean') {\n            self.ctx.$scope.model.value = false;\n        } else {\n            self.ctx.$scope.model.value = null;\n        }\n    }\n    \n    \n    self.ctx.$scope.updateAttribute = function ($event) {\n        if (self.ctx.$scope.entityDetected) {\n            var datasource = self.ctx.datasources[0];\n            var attributeService = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('attributeService'));\n            \n            attributeService.saveEntityAttributes(\n                {entityType: datasource.entityType,\n                 id: datasource.entityId},\n                'SERVER_SCOPE',\n                [\n                    {\n                        key: self.ctx.$scope.model.key,\n                        value: self.ctx.$scope.model.value\n                    }\n                ]\n            ).subscribe(\n                function () {\n                    var dialogs = self.ctx.$scope.$injector.get(self.ctx.servicesMap.get('dialogs'));\n                    dialogs.alert('Attribute updated.', 'Entity attribute has been successfully updated!', 'OK').subscribe();\n                }\n            );\n        }\n    };\n}\n\nself.onDataUpdated = function() {\n}\n\nself.onResize = function() {\n}\n\nself.typeParameters = function() {\n    return {\n        maxDatasources: 1,\n        maxDataKeys: 0,\n        dataKeysOptional: true\n    }\n}\n\nself.onDestroy = function() {\n}\n",
      "settingsSchema" : "{}",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"datasources\":[{\"type\":\"function\",\"name\":\"function\",\"dataKeys\":[]}],\"timewindow\":{\"realtime\":{\"timewindowMs\":60000}},\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"8px\",\"settings\":{},\"title\":\"Update entity attribute\",\"dropShadow\":true,\"enableFullscreen\":true,\"enableDataExport\":false,\"widgetStyle\":{},\"titleStyle\":{\"fontSize\":\"16px\",\"fontWeight\":400},\"useDashboardTimewindow\":true,\"showLegend\":false,\"actions\":{}}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "4e324f90-7dfd-11eb-a30b-8f9f47f70b9e"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}