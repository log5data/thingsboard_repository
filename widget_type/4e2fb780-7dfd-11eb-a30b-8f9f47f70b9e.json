{
  "entityType" : "WIDGET_TYPE",
  "entity" : {
    "fqn" : "demo_custom_widgets.custom_rpc",
    "name" : "Custom send RPC",
    "deprecated" : false,
    "image" : null,
    "description" : null,
    "descriptor" : {
      "type" : "rpc",
      "sizeX" : 5,
      "sizeY" : 6.5,
      "resources" : [ ],
      "templateHtml" : "<form #rpcForm=\"ngForm\" (submit)=\"sendCommand()\">\n  <div class=\"mat-content mat-padding\" fxLayout=\"column\">\n    <mat-form-field class=\"mat-block\">\n      <mat-label>RPC method</mat-label>\n      <input matInput required name=\"rpcMethod\" #rpcMethodField=\"ngModel\" [(ngModel)]=\"rpcMethod\"/>\n      <mat-error *ngIf=\"rpcMethodField.hasError('required')\">\n        RPC method name is required.\n      </mat-error>\n    </mat-form-field>\n    <mat-form-field class=\"mat-block\">\n      <mat-label>RPC params</mat-label>\n      <input matInput required name=\"rpcParams\" #rpcParamsField=\"ngModel\" [(ngModel)]=\"rpcParams\"/>\n      <mat-error *ngIf=\"rpcParamsField.hasError('required')\">\n        RPC params is required.\n      </mat-error>\n    </mat-form-field>\n    <button [disabled]=\"rpcForm.invalid || !rpcForm.dirty\" mat-raised-button color=\"primary\" type=\"submit\" >\n      Send RPC command\n    </button>\n    <div>\n      <label>RPC command response</label>\n      <div style=\"width: 100%; height: 100px; border: solid 2px gray\" [innerHTML]=\"rpcCommandResponse\">\n      </div>\n    </div>\n  </div>\n</form>",
      "templateCss" : "",
      "controllerScript" : "self.onInit = function() {\n    \n    self.ctx.$scope.sendCommand = function() {\n        var rpcMethod = self.ctx.$scope.rpcMethod;\n        var rpcParams = self.ctx.$scope.rpcParams;\n        var timeout = self.ctx.settings.requestTimeout;\n        var oneWayElseTwoWay = self.ctx.settings.oneWayElseTwoWay ? true : false;\n\n        var commandObservable;\n        if (oneWayElseTwoWay) {\n            commandObservable = self.ctx.controlApi.sendOneWayCommand(rpcMethod, rpcParams, timeout);\n        } else {\n            commandObservable = self.ctx.controlApi.sendTwoWayCommand(rpcMethod, rpcParams, timeout);\n        }\n        commandObservable.subscribe(\n            function (response) {\n                if (oneWayElseTwoWay) {\n                    self.ctx.$scope.rpcCommandResponse = \"Command was successfully received by device.<br> No response body because of one way command mode.\";\n                } else {\n                    self.ctx.$scope.rpcCommandResponse = \"Response from device:<br>\";                    \n                    self.ctx.$scope.rpcCommandResponse += JSON.stringify(response, undefined, 2);\n                }\n                self.ctx.detectChanges();\n            },\n            function (rejection) {\n                self.ctx.$scope.rpcCommandResponse = \"Failed to send command to the device:<br>\"\n                self.ctx.$scope.rpcCommandResponse += \"Status: \" + rejection.status + \"<br>\";\n                self.ctx.$scope.rpcCommandResponse += \"Status text: '\" + rejection.statusText + \"'\";\n                self.ctx.detectChanges();\n            }\n            \n        );\n    }\n    \n}",
      "settingsSchema" : "{\n    \"schema\": {\n        \"type\": \"object\",\n        \"title\": \"Settings\",\n        \"properties\": {\n            \"oneWayElseTwoWay\": {\n                \"title\": \"Is One Way Command\",\n                \"type\": \"boolean\",\n                \"default\": true\n            },\n            \"requestTimeout\": {\n                \"title\": \"RPC request timeout\",\n                \"type\": \"number\",\n                \"default\": 500\n            }\n        },\n        \"required\": []\n    },\n    \"form\": [\n        \"oneWayElseTwoWay\",\n        \"requestTimeout\"\n    ]\n} ",
      "dataKeySettingsSchema" : "{}\n",
      "defaultConfig" : "{\"targetDeviceAliases\":[],\"showTitle\":true,\"backgroundColor\":\"#fff\",\"color\":\"rgba(0, 0, 0, 0.87)\",\"padding\":\"0px\",\"settings\":{\"parseGpioStatusFunction\":\"return body[pin] === true;\",\"gpioStatusChangeRequest\":{\"method\":\"setGpioStatus\",\"paramsBody\":\"{\\n   \\\"pin\\\": \\\"{$pin}\\\",\\n   \\\"enabled\\\": \\\"{$enabled}\\\"\\n}\"},\"requestTimeout\":500,\"switchPanelBackgroundColor\":\"#b71c1c\",\"gpioStatusRequest\":{\"method\":\"getGpioStatus\",\"paramsBody\":\"{}\"},\"gpioList\":[{\"pin\":1,\"label\":\"GPIO 1\",\"row\":0,\"col\":0,\"_uniqueKey\":0},{\"pin\":2,\"label\":\"GPIO 2\",\"row\":0,\"col\":1,\"_uniqueKey\":1},{\"pin\":3,\"label\":\"GPIO 3\",\"row\":1,\"col\":0,\"_uniqueKey\":2}]},\"title\":\"Custom send RPC\"}"
    },
    "externalId" : null,
    "id" : {
      "entityType" : "WIDGET_TYPE",
      "id" : "4e2fb780-7dfd-11eb-a30b-8f9f47f70b9e"
    },
    "tags" : null
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}