{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n// decode payload to JSON\nvar data = decodeToJson(payload);\n\nvar result = [];\nvar humidity;\nvar temmperature;\nvar activity;\nvar external_input;\n\nvar rxMeta = data.uplink_message.rx_metadata;\nvar ulPayload = data.uplink_message.decoded_payload;\n\nif (typeof ulPayload === 'undefined') {\n    result.push({\n        deviceName: data.end_device_ids.device_id,\n        deviceType: 'thermostat',\n        telemetry: {\n            MsgType: 'throwaway',\n            count:data.uplink_message.f_cnt\n        }\n    });\n}\nelse {\n    switch (data.uplink_message.f_port) {\n        case 10: /* Uplink Data */ \n        \n        // Convert Battery Voltage to Battery Capacity (%)\n\t\t\tif (typeof ulPayload.battery_voltage !== 'undefined'){\n\n\t\t\t\tif (ulPayload.battery_voltage < 2.7){\n\t\t\t\t    var bat_cap = 0;\n\t\t\t\t    var bat_cap1 = 0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\n\t\t\t\t    var bat_cap1 = (ulPayload.battery_voltage - 2.7) / 0.3 * 100;\n\t\t\t\t    var bat_cap = parseInt(bat_cap1);\n\t\t\t\t}\n\n    \t\t\tif (bat_cap >= 80) {\n\t\t\t\t\tvar BatteryCapacity = \"80-100%\";\n\t\t\t\t\tbat_cap1 = 5;\n\t\t\t\t} else if (bat_cap >= 60) {\n\t\t\t\t\tvar BatteryCapacity = \"60-80%\";\n\t\t\t\t\tbat_cap1 = 4;\n\t\t\t\t} else if (bat_cap >= 40) {\n\t\t\t\t\tvar BatteryCapacity = \"40-60%\";\n\t\t\t\t\tbat_cap1 = 3;\n\t\t\t\t} else if (bat_cap >= 20) {\n\t\t\t\t\tvar BatteryCapacity = \"20-40%\";\n\t\t\t\t\tbat_cap1 = 2;\n\t\t\t\t} else if (bat_cap >= 5) {\n\t\t\t\t\tvar BatteryCapacity = \"5-20%\";\n\t\t\t\t\tbat_cap1 = 1;\n\t\t\t\t} else {\n\t\t\t\t\tvar BatteryCapacity = \"0-5%\";\n\t\t\t\t\tbat_cap1 = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ulPayload.ambient_temperature) {\n\t\t\t    temperature = ulPayload.ambient_temperature;\n\t\t\t} else if (ulPayload.temperature) {\n\t\t\t    temperature = ulPayload.temperature;\n\t\t\t    temperature = temperature.toFixed(2);\n\t\t\t}    \n\t\t\tif (ulPayload.relative_humidity) {\n\t\t\t    humidity = ulPayload.relative_humidity;\n\t\t\t} else if (ulPayload.humidity) {\n\t\t\t    humidity = ulPayload.humidity;\n\t\t\t    humidity = humidity.toFixed(2);\n\t\t\t}\n\t\t\tif (ulPayload.motion_event_state) {\n\t\t\t    activity = ulPayload.motion_event_state;\n\t\t\t} else if (ulPayload.activity) {\n\t\t\t    activity = ulPayload.activity;        \n\t\t\t}\n\t\t\tif (ulPayload.extconnector_state) {\n\t\t\t    external_input = ulPayload.extconnector_state;\n\t\t\t} else if (ulPayload.external_input) {\n\t\t\t    external_input = ulPayload.external_input;  \t\t\t        \n\t\t\t}\n            // Result object with device attributes/telemetry data\n            result.push({\n                deviceName:             data.end_device_ids.device_id,\n                deviceType:             'thermostat',\n                attributes: {\n                    integrationName: metadata.integrationName, \n                    applicationId: data.end_device_ids.application_ids.application_id\n                 },\n                telemetry: {\n                    temperature: temperature,\n//                    temperature: ulPayload.ambient_temperature,\n\t\t\t\t\thumidity: humidity,\n//\t\t\t\t\thumidity: ulPayload.relative_humidity,\n\t\t\t\t\tbattery_voltage: ulPayload.battery_voltage,\n\t\t\t\t\tbat_cap: bat_cap1,\n\t\t\t\t\tBatteryCapacity:BatteryCapacity,\n\t\t\t\t\tactivity: activity,\n//\t\t\t\t\tactivity: ulPayload.motion_event_state,\n\t\t\t\t\treed_state: ulPayload.reed_state,\n\t\t\t\t\treed_count: ulPayload.reed_count,\n\t\t\t\t\texternal_input:external_input,\n//\t\t\t\t\texternal_input: ulPayload.extconnector_state,\t\n\t\t\t\t\tcount:data.uplink_message.f_cnt,\n\t\t\t\t\ttime:ulPayload.dateTime,\n\t\t\t\t\ttime2: data.uplink_message.received_at,\n\t\t\t\t    airtime: data.uplink_message.consumed_airtime,\n/*                    temperature: ulPayload.temperature,\n\t\t\t\t\thumidity: ulPayload.humidity,\n\t\t\t\t\tbattery_voltage: ulPayload.battery_voltage,\n\t\t\t\t\tbat_cap: bat_cap1,\n\t\t\t\t\tBatteryCapacity:BatteryCapacity,\n\t\t\t\t\tactivity: ulPayload.activity,\n\t\t\t\t\treed_state: ulPayload.reed_state,\n\t\t\t\t\treed_count: ulPayload.reed_count,\n\t\t\t\t\texternal_input: ulPayload.external_input,\n\t\t\t\t\tcount:data.uplink_message.f_cnt,\n\t\t\t\t\tdata_rate: \"SF\" + data.uplink_message.settings.data_rate.lora.spreading_factor + \"BW\" + data.uplink_message.settings.data_rate.lora.bandwidth/1000,\n\t\t\t\t\ttime: data.uplink_message.received_at,\n*/\t\t\t\t\tgatewayRssi:            rxMeta[0].rssi, \n                    gatewayChannel:         rxMeta[0].channel_index, \n\t\t            gatewaySNR:             rxMeta[0].snr,\n\t\t            gatewayId: rxMeta[0].gateway_ids.eui\n                }\n            });\n            break;\n        case 100:  /* Configuration Data  */\n            result.push({\n                deviceName:             data.end_device_ids.device_id,\n                deviceType:             'thermostat',\n                attributes: {\n                    confirmedUplinks: ulPayload.confirmed_uplinks,\n\t\t\t\t\tadaptiveDataRate: ulPayload.adaptive_datarate,\n\t\t\t\t\tdata_rate: \"SF\" + data.uplink_message.settings.data_rate.lora.spreading_factor + \"BW\" + data.uplink_message.settings.data_rate.lora.bandwidth/1000,\n\t\t\t\t\tbatteryTxDisabled: ulPayload.battery_transmissions_disabled,\n\t\t\t\t\tdefaultTxPower: ulPayload.defaultTxPower,\n\t\t\t\t\tdefaultDataRate: ulPayload.default_datarate,\n\t\t\t\t\tdutyCycle: ulPayload.duty_cycle,\n\t\t\t\t\tperiodicTxDisabled: ulPayload.periodic_transmissions_disabled,\n\t\t\t\t\trx2DataRate: ulPayload.rx2_datarate,\n\t\t\t\t\trx2Frequency: ulPayload.rx2_frequency,\n\t\t\t\t\tsecondsPerTick: ulPayload.seconds_per_tick,\n\t\t\t\t\ttempTxDisabled: ulPayload.temperature_transmissions_disabled,\n\t\t\t\t\tticksPerBatteryTx: ulPayload.ticks_per_battery_Tx,\n\t\t\t\t\tticksPerTempTx: ulPayload.ticks_per_temperature_Tx,\n\t\t\t\t\tticksPerHumidityTx: ulPayload.ticks_per_relativeHumidity_Tx,\n\t\t\t\t\thumidityTxDisabled:  ulPayload.RH_transmissions_disabled,\n\t\t\t\t\tticksPerReedSwitchTx:  ulPayload.ticks_per_reedSwitch_Tx,\n\t\t\t\t\treedSwitchTxDisabled: ulPayload.reedSwitch_transmissions_disabled,\n\t\t\t\t\tticksPerLightTx:  ulPayload.ticks_per_light_Tx,\n\t\t\t\t\tlightTxDisabled:  ulPayload.light_transmissions_disabled,\n\t\t\t\t\tticksPerAccelerometer:  ulPayload.ticks_per_accelerometer_Tx,\n\t\t\t\t\taccelerometerTxDisabled:  ulPayload.accelerometer_transmissions_disabled,\n\t\t\t\t\tticksPerMCUTempTx:  ulPayload.ticks_per_MCU_temperature_Tx,\n\t\t\t\t\tMCUTempTxDisabled:  ulPayload.MCU_temperature_transmissions_disabled,\n\t\t\t\t\tticksPerPIRMoistureTx:  ulPayload.ticks_per_PIR_or_Moisture_Tx,\n\t\t\t\t\tPIRMoistureTxDisabled:  ulPayload.PIR_or_Moisture_transmissions_disabled,\n\t\t\t\t\tticksPerExternalInput:  ulPayload.ticks_per_externalInput_Tx,\n\t\t\t\t\texternalInputTxDisabled:  ulPayload.externalInput_transmissions_disabled,\n\t\t\t\t\tgatewayRssi:            rxMeta[0].rssi, \n                    gatewayChannel:         rxMeta[0].channel_index, \n\t\t            gatewaySNR:             rxMeta[0].snr,\n\t\t            gatewayId: rxMeta[0].gateway_ids.eui\n\t\t\t\t}\n\t\t\t});\n\t\t\tbreak;\n        default: \n        }\n\n        for (var numGWs = 0; numGWs < rxMeta.length; numGWs++) {\n            result.push({\n                deviceName:                 rxMeta[numGWs].gateway_ids.eui,\n                deviceType:                 'gateway', \n                telemetry: {\n                    reportingDevice:        data.end_device_ids.device_id,\n\t\t            time:                   data.uplink_message.received_at,\n\t\t            frequency:              parseInt(data.uplink_message.settings.frequency)/1000000, \n\t\t            modulation:             \"LORA\",\n\t\t            data_rate:              \"SF\" + data.uplink_message.settings.data_rate.lora.spreading_factor + \"BW\" + data.uplink_message.settings.data_rate.lora.bandwidth/1000,\n\t\t            coding_rate:            data.uplink_message.settings.coding_rate,\n\t\t            gatewayRssi:            rxMeta[numGWs].rssi, \n                    gatewayChannel:         rxMeta[numGWs].channel_index, \n\t\t            gatewaySNR:             rxMeta[numGWs].snr,\n\t\t            gatewayId: rxMeta[0].gateway_ids.eui\n\t\t        }\n\t        });\n        }\n}\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n    return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n    // covert payload to string.\n    var str = decodeToString(payload);\n\n    // parse string to JSON\n    var data = JSON.parse(str);\n    return data;\n}\n\nreturn result;"
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "6fabc8f0-2c35-11eb-8887-e94257e8a11b"
    },
    "name" : "Tektelic-Kona-FEI",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}