{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : "good metadata"
    },
    "configuration" : {
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\nvar data = decodeToJson(payload);\nvar result = {};\ninputDate = data.uplink_message.rx_metadata.time;  \ndate2 = Date(inputDate);\nvar reporting_device = data.end_device_ids.device_id;\n//Parse Gateway data\n\nvar numGateways = data.uplink_message.rx_metadata.length;\n\nvar gatewayId1 = data.uplink_message.rx_metadata[0].gateway_ids.eui;\nvar gatewayRssi1 = data.uplink_message.rx_metadata[0].rssi;\nvar gatewayChannel1 = data.uplink_message.rx_metadata[0].channel_index;\nvar gatewaySNR1 = data.uplink_message.rx_metadata[0].snr;\nvar frequency = parseInt(data.uplink_message.settings.frequency)/1000000;\nvar data_rate = \"SF\" + data.uplink_message.settings.data_rate.lora.spreading_factor + \"BW\" + data.uplink_message.settings.data_rate.lora.bandwidth/1000;\n\nvar result_gateway1 = {\n\tdeviceName: gatewayId1,\n\tdeviceType: 'gateway',\n\ttelemetry: {\n\t\treportingDevice: reporting_device,\n\t\ttime: date2,\n\t\tfrequency: frequency,\n\t\tmodulation: \"LORA\",\n\t\tdata_rate: data_rate,\n//\t\tairtime:data.uplink_message.rx_metadata.airtime,\n\t\tcoding_rate: data.uplink_message.settings.coding_rate,\n\t\tgatewayRssi: gatewayRssi1,\n\t\tgatewayChannel: gatewayChannel1,\n\t\tgatewaySNR: gatewaySNR1,\n\t\tcount: 1\n\t\t}\n\t};\n\nif (numGateways > 1) {\n\tvar gatewayId2 = data.uplink_message.rx_metadata[1].gateway_ids.eui;\n\tvar gatewayRssi2 = data.uplink_message.rx_metadata[1].rssi;\n\tvar gatewayChannel2 = data.uplink_message.rx_metadata[1].channel_index;\n\tvar gatewaySNR2 = data.uplink_message.rx_metadata[1].snr;\n\tvar result_gateway2 = {\n\t\tdeviceName: gatewayId2,\n\t\tdeviceType: 'gateway',\n\t\ttelemetry: {\n\t\t\treportingDevice: reporting_device,\n\t\t\ttime: date2,\n\t\t\tfrequency: frequency,\n\t\t\tmodulation: \"LORA\",\n\t\t\tdata_rate: data_rate,\n//\t\t\tairtime:data.uplink_message.rx_metadata.airtime,\n\t\t\tcoding_rate: data.uplink_message.settings.coding_rate,\n\t\t\tgatewayId: gatewayId2,\n\t\t\tgatewayRssi: gatewayRssi2,\n\t\t\tgatewayChannel: gatewayChannel2,\n\t\t\tgatewaySNR: gatewaySNR2,\n\t\t\tcount: 1\n\t\t}\n\t};\n}\n\nif (typeof data.uplink_message.decoded_payload === 'undefined') {\n    var result_telemetry = {\n        deviceName: reporting_device,\n        deviceType: 'air-pressure',\n        telemetry: {\n            MsgType: 'throwaway'\n        }\n    };\n    if (numGateways > 1) \n        result = [result_telemetry, result_gateway1, result_gateway2];\n    else\n        result = [result_telemetry, result_gateway1];\n    \n}\nelse {\n\tswitch (data.uplink_message.decoded_payload.msgType) {\n\t\tcase 126:                          /*  Telemetry Uplink  */\n\t\t\n\t\t\tif (typeof data.uplink_message.decoded_payload.battery_voltage !== 'undefined'){\n\t\t\t\n// Convert Battery Voltage to Battery Capacity (%)\n\t\t\t\n\n                var bat_cap1 = (data.uplink_message.decoded_payload.battery_voltage - 3.0) / 0.6 * 100;\n                var bat_cap = parseInt(bat_cap1);\n\t\t\t\tif (bat_cap <= 5) {\n\t\t\t\t\tvar BatteryCapacity = \"0-5%\";\n\t\t\t\t\tbat_cap = 0;\n\t\t\t\t} else if (bat_cap <= 20) {\n\t\t\t\t\tvar BatteryCapacity = \"5-20%\";\n\t\t\t\t\tbat_cap = 1;\n\t\t\t\t} else if (bat_cap <= 40) {\n\t\t\t\t\tvar BatteryCapacity = \"20-40%\";\n\t\t\t\t\tbat_cap = 2;\n\t\t\t\t} else if (bat_cap <= 60) {\n\t\t\t\t\tvar BatteryCapacity = \"40-60%\";\n\t\t\t\t\tbat_cap = 3;\n\t\t\t\t} else if (bat_cap <= 80) {\n\t\t\t\t\tvar BatteryCapacity = \"60-80%\";\n\t\t\t\t\tbat_cap = 4;\n\t\t\t\t} else {\n\t\t\t\t\tvar BatteryCapacity = \"80-100%\";\n\t\t\t\t\tbat_cap = 5;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n// Result object with device attributes/telemetry data\n\t\t\tvar result_telemetry = {\n\t\t\t\tdeviceName: reporting_device,\n\t\t\t\tdeviceType: 'air-pressure',\n\t\t\t\ttelemetry: {\n\t\t\t\t\ttemperature: data.uplink_message.decoded_payload.temperature,\n\t\t\t\t\thumidity: data.uplink_message.decoded_payload.humidity,\n\t\t\t\t\tbattery_voltage: data.uplink_message.decoded_payload.battery_voltage,\n\t\t\t\t\tairPressure: data.uplink_message.decoded_payload.airPressure,\n\t\t\t\t\tlight: data.uplink_message.decoded_payload.light,\n\t\t\t\t\tDustParticulate: data.uplink_message.decoded_payload.particulate,\n\t\t\t\t\tBatteryCapacity: BatteryCapacity,\n                    bat_cap:bat_cap,\n\t\t\t\t\ttime: date2,\n\t\t\t\t\tcount:data.uplink_message.f_cnt,\n\t\t\t\t\tgatewayId: gatewayId2,\n\t\t\t        gatewayRssi: gatewayRssi2,\n\t\t\t        gatewayChannel: gatewayChannel2,\n\t\t\t        gatewaySNR: gatewaySNR2\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (numGateways > 1) \n                result = [result_telemetry, result_gateway1, result_gateway2];\n            else\n                result = [result_telemetry, result_gateway1];\n    \n\t\t\tbreak;\n\t\t\t\n\t}\n}\n\nreturn result;\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n    return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n    // covert payload to string.\n    var str = decodeToString(payload);\n\n    // parse string to JSON\n    var data = JSON.parse(str);\n    return data;\n}\n\n// parse a date in yyyy-mm-dd format\nfunction parseDate(input) {\n  var parts = input.split('-');\n  // new Date(year, month [, day [, hours[, minutes[, seconds[, ms]]]]])\n  return new Date(parts[0], parts[1]-1, parts[2], parts[3], parts[4], parts[5]); // Note: months are 0-based\n}"
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "5f663760-647f-11ea-82c8-230398f51544"
    },
    "name" : "Polysense-TTS",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}