{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : "good metadata"
    },
    "configuration" : {
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\nvar data = decodeToJson(payload);\nvar result = [];\n\nvar rxMeta = data.uplink_message.rx_metadata;\nvar ulPayload = data.uplink_message.decoded_payload;\n\n//inputDate = data.uplink_message.rx_metadata.time;  \n//date2 = Date(inputDate);\nvar reporting_device = data.end_device_ids.device_id;\n\n\nif (typeof ulPayload === 'undefined') {\n    result.push ({\n        deviceName: reporting_device,\n        deviceType: 'air-quality',\n        integration_Id: metadata.integrationName,\n        telemetry: {\n            MsgType: 'throwaway'\n        }\n    });\n}\nelse {\n\tswitch (ulPayload.msgType) {\n\t\tcase 126:                          /*  Telemetry Uplink  */\n\t\t\n\t\t\tif (typeof ulPayload.battery_voltage !== 'undefined'){\n\t\t\t\n// Convert Battery Voltage to Battery Capacity (%)\n\t\t\t\n\n                var bat_cap1 = (ulPayload.battery_voltage - 3.0) / 0.6 * 100;\n                var bat_cap = parseInt(bat_cap1);\n\t\t\t\tif (bat_cap <= 5) {\n\t\t\t\t\tvar BatteryCapacity = \"0-5%\";\n\t\t\t\t\tbat_cap = 0;\n\t\t\t\t} else if (bat_cap <= 20) {\n\t\t\t\t\tvar BatteryCapacity = \"5-20%\";\n\t\t\t\t\tbat_cap = 1;\n\t\t\t\t} else if (bat_cap <= 40) {\n\t\t\t\t\tvar BatteryCapacity = \"20-40%\";\n\t\t\t\t\tbat_cap = 2;\n\t\t\t\t} else if (bat_cap <= 60) {\n\t\t\t\t\tvar BatteryCapacity = \"40-60%\";\n\t\t\t\t\tbat_cap = 3;\n\t\t\t\t} else if (bat_cap <= 80) {\n\t\t\t\t\tvar BatteryCapacity = \"60-80%\";\n\t\t\t\t\tbat_cap = 4;\n\t\t\t\t} else {\n\t\t\t\t\tvar BatteryCapacity = \"80-100%\";\n\t\t\t\t\tbat_cap = 5;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n   \n// Result object with device attributes/telemetry data\n\t\t\tresult.push ({\n\t\t\t\tdeviceName: reporting_device,\n\t\t\t\tdeviceType: 'air-quality',\n\t\t\t\tintegration_Id: metadata.integrationName,\n\t\t\t\ttelemetry: {\n\t\t\t\t\ttemperature: ulPayload.temperature,\n\t\t\t\t\thumidity: ulPayload.humidity,\n\t\t\t\t\tbattery_voltage: ulPayload.battery_voltage,\n\t\t\t\t\tairPressure: ulPayload.airPressure,\n\t\t\t\t\tlight: ulPayload.light,\n\t\t\t\t\tDustParticulate: ulPayload.pm25,\n\t\t\t\t\tpm25:ulPayload.pm25,\n\t\t\t\t\tBatteryCapacity: BatteryCapacity,\n                    bat_cap:bat_cap,\n\t\t\t\t\ttime: data.uplink_message.received_at,\n\t\t\t\t\tcount:data.uplink_message.f_cnt\n\t\t\t\t}\n\t\t\t});\n\t\t\tbreak;\n\t\tcase 136:\n\t\t    result.push ({\n\t\t\t\tdeviceName: reporting_device,\n\t\t\t\tdeviceType: 'air-quality',\n\t\t\t\tintegration_Id: metadata.integrationName,\n\t\t\t\tattributes: {\n\t\t\t\t\tgranularity:ulPayload.schedulingGranularity ,\n\t\t\t\t\tperiodicDataReportCycle: ulPayload.periodic_data_report_cycle ,\n\t\t\t\t\tbattery_voltage: ulPayload.battery_voltage,\n\t\t\t\t\ts1_sensor_type : ulPayload.s1_sensor_type,\n\t\t\t\t\ts2_sensor_type : ulPayload.s2_sensor_type,\n\t\t\t\t\ts3_sensor_type : ulPayload.s4_sensor_type,\n\t\t\t\t\ts4_sensor_type : ulPayload.s4_sensor_type,\n\t\t\t\t\ts5_sensor_type : ulPayload.s5_sensor_type,\n\t\t\t\t\ts1_sensor_ctrl: ulPayload.s1_sensor_ctrl,\n\t\t\t\t\ts2_sensor_ctrl: ulPayload.s2_sensor_ctrl,\n\t\t\t\t\ts3_sensor_ctrl: ulPayload.s3_sensor_ctrl,\n\t\t\t\t\ts4_sensor_ctrl: ulPayload.s4_sensor_ctrl,\n\t\t\t\t\ts5_sensor_ctrl: ulPayload.s5_sensor_ctrl,\n\t\t\t\t\ts1_scheduling_cycle: ulPayload.s1_scheduling_cycle,\n\t\t\t\t\ts2_scheduling_cycle: ulPayload.s2_scheduling_cycle,\n\t\t\t\t\ts3_scheduling_cycle: ulPayload.s3_scheduling_cycle,\n\t\t\t\t\ts4_scheduling_cycle: ulPayload.s4_scheduling_cycle,\n\t\t\t\t\ts5_scheduling_cycle: ulPayload.s5_scheduling_cycle\n\t\t\t\t}\n\t\t\t});\n\t\t    break;\n\t    default:\n\t}\n\t       for (var numGWs = 0; numGWs < rxMeta.length; numGWs++) {\n            result.push({\n                deviceName:                 rxMeta[numGWs].gateway_ids.eui,\n                deviceType:                 'gateway', \n                telemetry: {\n                    reportingDevice:        data.end_device_ids.device_id,\n\t\t            time:                   data.uplink_message.received_at,\n\t\t            frequency:              parseInt(data.uplink_message.settings.frequency)/1000000, \n\t\t            modulation:             \"LORA\",\n\t\t            data_rate:              \"SF\" + data.uplink_message.settings.data_rate.lora.spreading_factor + \"BW\" + data.uplink_message.settings.data_rate.lora.bandwidth/1000,\n\t\t            coding_rate:            data.uplink_message.settings.coding_rate,\n\t\t            gatewayRssi:            rxMeta[numGWs].rssi, \n                    gatewayChannel:         rxMeta[numGWs].channel_index, \n\t\t            gatewaySNR:             rxMeta[numGWs].snr\n\t\t        }\n\t        });\n        }\n}\n\nreturn result;\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n    return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n    // covert payload to string.\n    var str = decodeToString(payload);\n\n    // parse string to JSON\n    var data = JSON.parse(str);\n    return data;\n}\n\n// parse a date in yyyy-mm-dd format\nfunction parseDate(input) {\n  var parts = input.split('-');\n  // new Date(year, month [, day [, hours[, minutes[, seconds[, ms]]]]])\n  return new Date(parts[0], parts[1]-1, parts[2], parts[3], parts[4], parts[5]); // Note: months are 0-based\n}"
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "5d07c050-2c35-11eb-8887-e94257e8a11b"
    },
    "name" : "Poly-Dust-TTS -FEI",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}