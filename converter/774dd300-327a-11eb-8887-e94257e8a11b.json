{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n// decode payload to JSON\nvar data = decodeToJson(payload);\n\nvar result = [];\n\nvar rxMeta = data.uplink_message.rx_metadata;\nvar ulPayload = data.uplink_message.decoded_payload;\n\nif (typeof ulPayload === 'undefined') {\n    result.push({\n        deviceName: data.end_device_ids.device_id,\n        deviceType: 'diffPressure',\n        telemetry: {\n            MsgType: 'throwaway'\n        }\n    });\n}\nelse {\n    switch (data.uplink_message.f_port) {\n        case 1: /* Uplink Data */ \n        \n                // Convert Battery Voltage to Battery Capacity (%)\n\t\t\tif (typeof ulPayload.Vbattery !== 'undefined'){\n\n\t\t\t\tif (ulPayload.Vbattery < 2.7){\n\t\t\t\t    var bat_cap = 0;\n\t\t\t\t    var bat_cap1 = 0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\n\t\t\t\t    var bat_cap1 = (ulPayload.Vbattery - 2.7) / 0.3 * 100;\n\t\t\t\t    var bat_cap = parseInt(bat_cap1);\n\t\t\t\t}\n\n    \t\t\tif (bat_cap >= 80) {\n\t\t\t\t\tvar BatteryCapacity = \"80-100%\";\n\t\t\t\t\tbat_cap1 = 5;\n\t\t\t\t} else if (bat_cap >= 60) {\n\t\t\t\t\tvar BatteryCapacity = \"60-80%\";\n\t\t\t\t\tbat_cap1 = 4;\n\t\t\t\t} else if (bat_cap >= 40) {\n\t\t\t\t\tvar BatteryCapacity = \"40-60%\";\n\t\t\t\t\tbat_cap1 = 3;\n\t\t\t\t} else if (bat_cap >= 20) {\n\t\t\t\t\tvar BatteryCapacity = \"20-40%\";\n\t\t\t\t\tbat_cap1 = 2;\n\t\t\t\t} else if (bat_cap >= 5) {\n\t\t\t\t\tvar BatteryCapacity = \"5-20%\";\n\t\t\t\t\tbat_cap1 = 1;\n\t\t\t\t} else {\n\t\t\t\t\tvar BatteryCapacity = \"0-5%\";\n\t\t\t\t\tbat_cap1 = 0;\n\t\t\t\t}\n\t\t\t}\n\n            // Result object with device attributes/telemetry data\n            result.push({\n                deviceName:             data.end_device_ids.device_id,\n                deviceType:             'diffPressure',\n                attributes: {\n                    integrationName: metadata.integrationName, \n                    applicationId: data.end_device_ids.application_ids.application_id\n                 },\n                telemetry: {\n                    diffPressure: ulPayload.DifferentialPressure,\n\t\t\t\t\ttemperature: ulPayload.TemperatureC,\n\t\t\t\t\tbattery_voltage: ulPayload.Vbattery,\n\t\t\t\t\tbat_cap: bat_cap1,\n\t\t\t\t\tBatteryCapacity:BatteryCapacity,\n\t\t\t\t\tbootCounter: ulPayload.Boot,\n\t\t\t\t\tcount:data.uplink_message.f_cnt,\n\t\t\t\t\ttime: data.uplink_message.received_at,\n\t\t\t\t\tgatewayRssi:            rxMeta[0].rssi, \n                    gatewayChannel:         rxMeta[0].channel_index, \n\t\t            gatewaySNR:             rxMeta[0].snr,\n\t\t            gatewayId: rxMeta[0].gateway_ids.eui\n                }\n            });\n            break;\n\n        default: \n        }\n\n        for (var numGWs = 0; numGWs < rxMeta.length; numGWs++) {\n            result.push({\n                deviceName:                 rxMeta[numGWs].gateway_ids.eui,\n                deviceType:                 'gateway', \n                telemetry: {\n                    reportingDevice:        data.end_device_ids.device_id,\n\t\t            time:                   data.uplink_message.received_at,\n\t\t            frequency:              parseInt(data.uplink_message.settings.frequency)/1000000, \n\t\t            modulation:             \"LORA\",\n\t\t            data_rate:              \"SF\" + data.uplink_message.settings.data_rate.lora.spreading_factor + \"BW\" + data.uplink_message.settings.data_rate.lora.bandwidth/1000,\n\t\t            coding_rate:            data.uplink_message.settings.coding_rate,\n\t\t            gatewayRssi:            rxMeta[numGWs].rssi, \n                    gatewayChannel:         rxMeta[numGWs].channel_index, \n\t\t            gatewaySNR:             rxMeta[numGWs].snr\n\t\t        }\n\t        });\n        }\n}\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n    return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n    // covert payload to string.\n    var str = decodeToString(payload);\n\n    // parse string to JSON\n    var data = JSON.parse(str);\n    return data;\n}\n\nreturn result;"
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "774dd300-327a-11eb-8887-e94257e8a11b"
    },
    "name" : "MCCI-DiffPressure-FEI",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}