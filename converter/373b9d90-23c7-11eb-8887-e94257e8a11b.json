{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n// decode payload to JSON\nvar data = decodeToJson(payload);\n\nvar result = [];\n\nvar rxMeta = data.uplink_message.rx_metadata;\nvar ulPayload = data.uplink_message.decoded_payload;\nvar date = data.uplink_message.received_at;\n\nif (typeof ulPayload === 'undefined') {\n    result.push({\n        deviceName: data.end_device_ids.device_id,\n        deviceType: 'air-quality',\n        telemetry: {\n            MsgType: 'throwaway'\n        }\n    });\n}\nelse {\n    switch (data.uplink_message.f_port) {\n        case 1: /* Uplink Data */ \n\n            // Result object with device attributes/telemetry data\n            result.push({\n                deviceName:             data.end_device_ids.device_id,\n                deviceType:             'air-quality',\n                attributes: {\n                    integrationName: metadata.integrationName, \n                    applicationId: data.end_device_ids.application_ids.application_id\n                 },\n                telemetry: {\n                    aqi: ulPayload.aqi,\n                    aqi_partial10: ulPayload.aqi_partial[10], \n                    aqi_partial1_0: ulPayload.aqi_partial[\"1.0\"],\n                    aqi_partial2_5: ulPayload.aqi_partial[2.5],\n                    dust_5: ulPayload.dust[5],\n                    dust_10: ulPayload.dust[10],\n                    dust_0_3: ulPayload.dust[0.3],\n                    dust_0_5: ulPayload.dust[0.5],\n                    dust_1_0: ulPayload.dust[\"1.0\"],\n                    dust_2_5: ulPayload.dust[2.5],\n                    pm_10: ulPayload.pm[10],\n                    pm_1_0: ulPayload.pm[\"1.0\"],\n                    pm_2_5: ulPayload.pm[2.5],\n                    DustParticulate: ulPayload.pm[2.5],\n\t\t\t\t\ttemperature: ulPayload.tempC,\n\t\t\t\t\thumidity: ulPayload.rh,\n\t\t\t\t\ttDewC: ulPayload.tDewC,\n\t\t\t\t\ttHeatIndexF: ulPayload.tHeatIndexF,\n\t\t\t\t\tvBus: ulPayload.vBus,\n\t\t\t\t\tbattery_voltage: ulPayload.vBat,\n//\t\t\t\t\tbat_cap: bat_cap1,\n//\t\t\t\t\tBatteryCapacity:data.uplink_message.decoded_payload.batt_lifetime,\n\t\t\t\t\tbootCounter: ulPayload.boot,\n\t\t\t\t\tcount:data.uplink_message.f_cnt,\n\t\t\t\t\ttime: data.uplink_message.received_at,\n\t\t\t\t\tgatewayRssi:            rxMeta[0].rssi, \n                    gatewayChannel:         rxMeta[0].channel_index, \n\t\t            gatewaySNR:             rxMeta[0].snr,\n\t\t            gatewayId: rxMeta[0].gateway_ids.eui\n                }\n            });\n            break;\n\n        case 2: /*Dragino Uplink Data */ \n\n            // Result object with device attributes/telemetry data\n            result.push({\n                deviceName:             data.end_device_ids.device_id,\n                deviceType:             'dragino-lht65',\n                attributes: {\n                    integrationName: metadata.integrationName, \n                    applicationId: data.end_device_ids.application_ids.application_id\n                 },\n                telemetry: {\n\t\t\t\t    temperature: ulPayload.TempC_SHT,\n\t\t\t\t    humidity: ulPayload.Hum_SHT,\n\t\t\t\t    battery_voltage: ulPayload.BatV,\n\t\t\t\t    temperatureProbe: ulPayload.TempC_DS,\n//\t\t\t\t    temperature:ulPayload.TempC_DS,\n\t\t\t\t    extSensor: ulPayload.Ext_sensor,\n//\t\t\t\t\tbat_cap: bat_cap1,\n//\t\t\t\t\tBatteryCapacity:data.uplink_message.decoded_payload.batt_lifetime,\n\t\t\t\t\tcount:data.uplink_message.f_cnt,\n\t\t\t\t\ttime: data.uplink_message.received_at,\n\t\t\t\t\tgatewayRssi:            rxMeta[0].rssi, \n                    gatewayChannel:         rxMeta[0].channel_index, \n\t\t            gatewaySNR:             rxMeta[0].snr,\n\t\t            gatewayId: rxMeta[0].gateway_ids.eui\n                }\n            });\n            break;\n\n        default: \n        }\n\n        for (var numGWs = 0; numGWs < rxMeta.length; numGWs++) {\n            result.push({\n                deviceName:                 rxMeta[numGWs].gateway_ids.eui,\n                deviceType:                 'gateway', \n                telemetry: {\n                    reportingDevice:        data.end_device_ids.device_id,\n\t\t            time:                   data.uplink_message.received_at,\n\t\t            frequency:              parseInt(data.uplink_message.settings.frequency)/1000000, \n\t\t            modulation:             \"LORA\",\n\t\t            data_rate:              \"SF\" + data.uplink_message.settings.data_rate.lora.spreading_factor + \"BW\" + data.uplink_message.settings.data_rate.lora.bandwidth/1000,\n\t\t            coding_rate:            data.uplink_message.settings.coding_rate,\n\t\t            gatewayRssi:            rxMeta[numGWs].rssi, \n                    gatewayChannel:         rxMeta[numGWs].channel_index, \n\t\t            gatewaySNR:             rxMeta[numGWs].snr\n\t\t        }\n\t        });\n        }\n}\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n    return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n    // covert payload to string.\n    var str = decodeToString(payload);\n\n    // parse string to JSON\n    var data = JSON.parse(str);\n    return data;\n}\n\nreturn result;"
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "373b9d90-23c7-11eb-8887-e94257e8a11b"
    },
    "name" : "MCCI-dust-FEI",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}