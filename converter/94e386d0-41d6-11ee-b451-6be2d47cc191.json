{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "decoder" : "// Decode an uplink message from a buffer\r\n// payload - array of bytes\r\n// metadata - key/value object\r\n\r\n/** Decoder **/\r\n// decode payload to JSON\r\nvar data = decodeToJson(payload);\r\n\r\nvar result = [];\r\n\r\nvar rxMeta = data.uplink_message.rx_metadata;\r\nvar ulPayload = data.uplink_message.decoded_payload;\r\n\r\nif (typeof ulPayload === 'undefined') {\r\n    result.push({\r\n        deviceName: data.end_device_ids.device_id,\r\n        deviceType: data.uplink_message.version_ids.model_id,\r\n        deviceBrand: data.uplink_message.version_ids.brand_id,\r\n        telemetry: {\r\n            MsgType: 'throwaway',\r\n            count: data.uplink_message.f_cnt,\r\n            port: data.uplink_message.f_port\r\n        }\r\n    });\r\n}\r\nelse {\r\n    switch (data.uplink_message.f_port) {\r\n        case 85: /*uplink message*/ \r\n            if (ulPayload.battery !== 'undefined') {\r\n                ulPayload.BatteryCapacity = ulPayload.battery + '%';\r\n            }\r\n\t\r\n            // Result object with device attributes/telemetry data\r\n            result.push({\r\n                deviceName: data.end_device_ids.device_id,\r\n                deviceType: data.uplink_message.version_ids.model_id,\r\n                deviceBrand: data.uplink_message.version_ids.brand_id,\r\n                attributes: {\r\n                    integrationName: metadata.integrationName, \r\n                    applicationId: data.end_device_ids.application_ids.application_id,\r\n                    deviceName: data.end_device_ids.device_id,\r\n                    deviceType: data.uplink_message.version_ids.model_id,\r\n                    deviceBrand: data.uplink_message.version_ids.brand_id\r\n                 },\r\n                metadata: {\r\n                    integrationName: metadata.integrationName, \r\n                    applicationId: data.end_device_ids.application_ids.application_id,\r\n                    deviceName: data.end_device_ids.device_id,\r\n                    deviceType: data.uplink_message.version_ids.model_id,\r\n                    deviceBrand: data.uplink_message.version_ids.brand_id\r\n                 },\r\n                telemetry: {\r\n                    //tag_no: ulPayload.tag_no,\r\n                    //temperature: ulPayload.ambient_temperature,\r\n                    //humidity: ulPayload.relative_humidity,\r\n                    //battery_voltage: ulPayload.battery_voltage,\r\n//                  bat_cap: bat_cap1,\r\n//                  activity: ulPayload.activity,\r\n//                  activity: ulPayload.motion_event_state,\r\n//                  reed_state: ulPayload.reed_state,\r\n//                  reed_count: ulPayload.reed_count,\r\n//                  external_input: ulPayload.external_input,\r\n//                  external_input: ulPayload.extconnector_state,\r\n                    battery: ulPayload.battery,\r\n                    BatteryCapacity: ulPayload.BatteryCapacity,\r\n                    water_leak_status: ulPayload.water_leak_status,\r\n                    temperature: ulPayload.temperature,\r\n                    humidity: ulPayload.humidity,\r\n                    count: data.uplink_message.f_cnt,\r\n                    time: data.uplink_message.received_at,\r\n                    airtime: data.uplink_message.consumed_airtime,\r\n                    f_port: data.uplink_message.f_port\r\n                }\r\n            });\r\n            break;\r\n\r\n        default: \r\n            result.push({\r\n                deviceName: data.end_device_ids.device_id,\r\n                deviceType: data.uplink_message.version_ids.model_id,\r\n                telemetry: {\r\n                    MsgType: 'throwaway',\r\n                    count: data.uplink_message.f_cnt,\r\n                    port: data.uplink_message.f_port\r\n                }\r\n    });\r\n        }\r\n\r\n        for (var numGWs = 0; numGWs < rxMeta.length; numGWs++) {\r\n            result.push({\r\n                deviceName: rxMeta[numGWs].gateway_ids.gateway_id,\r\n                deviceEUI: rxMeta[numGWs].gateway_ids.eui,\r\n                deviceType: 'gateway', \r\n                telemetry: {\r\n                    reportingDevice:        data.end_device_ids.device_id,\r\n\t\t            time:                   data.uplink_message.received_at,\r\n\t\t            airtime:                data.uplink_message.consumed_airtime,\r\n\t\t            frequency:              parseInt(data.uplink_message.settings.frequency)/1000000, \r\n\t\t            modulation:             \"LORA\",\r\n\t\t            data_rate:              \"SF\" + data.uplink_message.settings.data_rate.lora.spreading_factor + \"BW\" + data.uplink_message.settings.data_rate.lora.bandwidth/1000,\r\n\t\t            coding_rate:            data.uplink_message.settings.coding_rate,\r\n\t\t            gatewayRssi:            rxMeta[numGWs].rssi, \r\n                    gatewayChannel:         rxMeta[numGWs].channel_index, \r\n\t\t            gatewaySNR:             rxMeta[numGWs].snr\r\n\t\t        }\r\n\t        });\r\n        }\r\n}\r\n/** Helper functions **/\r\n\r\nfunction decodeToString(payload) {\r\n    return String.fromCharCode.apply(String, payload);\r\n}\r\n\r\nfunction decodeToJson(payload) {\r\n    // covert payload to string.\r\n    var str = decodeToString(payload);\r\n\r\n    // parse string to JSON\r\n    var data = JSON.parse(str);\r\n    return data;\r\n}\r\n\r\nreturn result;",
      "encoder" : null
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "94e386d0-41d6-11ee-b451-6be2d47cc191"
    },
    "name" : "Milesight-EM300-TH-Uplink",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}