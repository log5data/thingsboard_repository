{
  "entityType" : "CONVERTER",
  "entity" : {
    "additionalInfo" : {
      "description" : ""
    },
    "configuration" : {
      "decoder" : "// Decode an uplink message from a buffer\n// payload - array of bytes\n// metadata - key/value object\n\n/** Decoder **/\n\nvar data = decodeToJson(payload);\nvar result = [];\n\nvar rxMeta = data.uplink_message.rx_metadata;\nvar ulPayload = data.uplink_message.decoded_payload;\n\nif (typeof ulPayload.retrieval_data_1 !== 'undefined') {var data_retrieval = true;}\nif (typeof ulPayload.retrieval_data_1 !== 'undefined') {var retrieval_data_1 = ulPayload.retrieval_data_1;} else {var retrieval_data_1 = {};}\nif (typeof ulPayload.retrieval_data_2 !== 'undefined') {var retrieval_data_2 = ulPayload.retrieval_data_2;} else {var retrieval_data_2 = {};}\nif (typeof ulPayload.retrieval_data_3 !== 'undefined') {var retrieval_data_3 = ulPayload.retrieval_data_3;} else {var retrieval_data_3 = {};}\nif (typeof ulPayload.retrieval_data_4 !== 'undefined') {var retrieval_data_4 = ulPayload.retrieval_data_4;} else {var retrieval_data_4 = {};}\nif (typeof ulPayload.retrieval_data_5 !== 'undefined') {var retrieval_data_5 = ulPayload.retrieval_data_5;} else {var retrieval_data_5 = {};}\nif (typeof ulPayload.retrieval_data_6 !== 'undefined') {var retrieval_data_6 = ulPayload.retrieval_data_6;} else {var retrieval_data_6 = {};}\nif (typeof ulPayload.retrieval_data_7 !== 'undefined') {var retrieval_data_7 = ulPayload.retrieval_data_7;} else {var retrieval_data_7 = {};}\nif (typeof ulPayload.retrieval_data_8 !== 'undefined') {var retrieval_data_8 = ulPayload.retrieval_data_8;} else {var retrieval_data_8 = {};}\nif (typeof ulPayload.retrieval_data_9 !== 'undefined') {var retrieval_data_9 = ulPayload.retrieval_data_9;} else {var retrieval_data_9 = {};}\nif (typeof ulPayload.retrieval_data_10 !== 'undefined') {var retrieval_data_10 = ulPayload.retrieval_data_10;} else {var retrieval_data_10 = {};}\nif (typeof ulPayload.retrieval_data_11 !== 'undefined') {var retrieval_data_11 = ulPayload.retrieval_data_11;} else {var retrieval_data_11 = {};}\nif (typeof ulPayload.retrieval_data_12 !== 'undefined') {var retrieval_data_12 = ulPayload.retrieval_data_12;} else {var retrieval_data_12 = {};}\nif (typeof ulPayload.retrieval_data_13 !== 'undefined') {var retrieval_data_13 = ulPayload.retrieval_data_13;} else {var retrieval_data_13 = {};}\nif (typeof ulPayload.retrieval_data_14 !== 'undefined') {var retrieval_data_14 = ulPayload.retrieval_data_14;} else {var retrieval_data_14 = {};}\nif (typeof ulPayload.retrieval_data_15 !== 'undefined') {var retrieval_data_15 = ulPayload.retrieval_data_15;} else {var retrieval_data_15 = {};}\nif (typeof ulPayload.retrieval_data_16 !== 'undefined') {var retrieval_data_16 = ulPayload.retrieval_data_16;} else {var retrieval_data_16 = {};}\nif (typeof ulPayload.retrieval_data_17 !== 'undefined') {var retrieval_data_17 = ulPayload.retrieval_data_17;} else {var retrieval_data_17 = {};}\nif (typeof ulPayload.retrieval_data_18 !== 'undefined') {var retrieval_data_18 = ulPayload.retrieval_data_18;} else {var retrieval_data_18 = {};}\nif (typeof ulPayload.retrieval_data_19 !== 'undefined') {var retrieval_data_19 = ulPayload.retrieval_data_19;} else {var retrieval_data_19 = {};}\nif (typeof ulPayload.retrieval_data_20 !== 'undefined') {var retrieval_data_20 = ulPayload.retrieval_data_20;} else {var retrieval_data_20 = {};}\nif (typeof ulPayload.retrieval_data_21 !== 'undefined') {var retrieval_data_21 = ulPayload.retrieval_data_21;} else {var retrieval_data_21 = {};}\nif (typeof ulPayload.retrieval_data_22 !== 'undefined') {var retrieval_data_22 = ulPayload.retrieval_data_22;} else {var retrieval_data_22 = {};}\n\n//inputDate = data.uplink_message.rx_metadata.time;  \n//date2 = Date(inputDate);\nvar reporting_device = data.end_device_ids.device_id;\n\n\nif (typeof ulPayload === 'undefined') {\n    result.push ({\n        deviceName: reporting_device,\n        deviceType: 'thermostat',\n         attributes: {\n                    integrationName: metadata.integrationName, \n                    applicationId: data.end_device_ids.application_ids.application_id\n         },\n        telemetry: {\n            MsgType: 'throwaway'\n        }\n    });\n}\nelse {\n\t\n\tif (typeof ulPayload.BatV !== 'undefined'){\n\t\t\t\n// Convert Battery Voltage to Battery Capacity (%)\n\t\t\t\n\n        var bat_cap1 = (ulPayload.BatV - 2.5) / 0.3 * 100;\n        var bat_cap = parseInt(bat_cap1);\n\t\tif (bat_cap <= 5) {\n\t\t\tvar BatteryCapacity = \"0-5%\";\n\t\t\tbat_cap = 0;\n\t\t    } \n\t\telse if (bat_cap <= 20) {\n\t\t\tvar BatteryCapacity = \"5-20%\";\n\t\t\tbat_cap = 1;\n\t\t\t} \n\t\telse if (bat_cap <= 40) {\n\t\t\tvar BatteryCapacity = \"20-40%\";\n\t\t\tbat_cap = 2;\n\t\t\t}\n\t\telse if (bat_cap <= 60) {\n\t\t\tvar BatteryCapacity = \"40-60%\";\n\t\t\tbat_cap = 3;\n\t\t\t}\n\t\telse if (bat_cap <= 80) {\n\t\t\tvar BatteryCapacity = \"60-80%\";\n\t\t\tbat_cap = 4;\n\t\t\t}\n\t\telse {\n\t\t\tvar BatteryCapacity = \"80-100%\";\n\t\t\tbat_cap = 5;\n\t\t\t}\n\t    }\n\t\t\t\n   \n// Result object with device attributes/telemetry data\n\t\tresult.push ({\n\t\t\tdeviceName: reporting_device,\n\t\t\tdeviceType: 'thermostat',\n\t\t\t attributes: {\n                    integrationName: metadata.integrationName, \n                    applicationId: data.end_device_ids.application_ids.application_id\n\t\t\t },\n\t\t\ttelemetry: {\n//\t\t\t\ttemperature: ulPayload.TempC_SHT,\n\t\t\t\thumidity: ulPayload.Hum_SHT,\n\t\t\t\tbattery_voltage: ulPayload.BatV,\n\t\t\t\ttemperatureProbe: ulPayload.TempC_DS,\n\t\t\t\ttemperature:ulPayload.TempC_SHT,\n\t\t\t\textSensor: ulPayload.Ext_sensor,\n\t\t\t\tBatteryCapacity: BatteryCapacity,\n                bat_cap:bat_cap,\n                data_retrieval: data_retrieval,\n                retrieval_data_1_Hum_SHT:retrieval_data_1.Hum_SHT,\n                retrieval_data_1_TempC_DS:retrieval_data_1.TempC_DS,\n                retrieval_data_1_TempC_SHT:retrieval_data_1.TempC_SHT,\n                retrieval_data_1_Ts:retrieval_data_1.Timestamp,\n                retrieval_data_2_Hum_SHT:retrieval_data_2.Hum_SHT,\n                retrieval_data_2_TempC_DS:retrieval_data_2.TempC_DS,\n                retrieval_data_2_TempC_SHT:retrieval_data_2.TempC_SHT,\n                retrieval_data_2_Ts:retrieval_data_2.Timestamp,\n                retrieval_data_3_Hum_SHT:retrieval_data_3.Hum_SHT,\n                retrieval_data_3_TempC_DS:retrieval_data_3.TempC_DS,\n                retrieval_data_3_TempC_SHT:retrieval_data_3.TempC_SHT,\n                retrieval_data_3_Ts:retrieval_data_3.Timestamp,\n                retrieval_data_4_Hum_SHT:retrieval_data_4.Hum_SHT,\n                retrieval_data_4_TempC_DS:retrieval_data_4.TempC_DS,\n                retrieval_data_4_TempC_SHT:retrieval_data_4.TempC_SHT,\n                retrieval_data_4_Ts:retrieval_data_4.Timestamp,\n                retrieval_data_5_Hum_SHT:retrieval_data_5.Hum_SHT,\n                retrieval_data_5_TempC_DS:retrieval_data_5.TempC_DS,\n                retrieval_data_5_TempC_SHT:retrieval_data_5.TempC_SHT,\n                retrieval_data_5_Ts:retrieval_data_5.Timestamp,\n                retrieval_data_6_Hum_SHT:retrieval_data_6.Hum_SHT,\n                retrieval_data_6_TempC_DS:retrieval_data_6.TempC_DS,\n                retrieval_data_6_TempC_SHT:retrieval_data_6.TempC_SHT,\n                retrieval_data_6_Ts:retrieval_data_6.Timestamp,\n                retrieval_data_7_Hum_SHT:retrieval_data_7.Hum_SHT,\n                retrieval_data_7_TempC_DS:retrieval_data_7.TempC_DS,\n                retrieval_data_7_TempC_SHT:retrieval_data_7.TempC_SHT,\n                retrieval_data_7_Ts:retrieval_data_7.Timestamp,\n                retrieval_data_8_Hum_SHT:retrieval_data_8.Hum_SHT,\n                retrieval_data_8_TempC_DS:retrieval_data_8.TempC_DS,\n                retrieval_data_8_TempC_SHT:retrieval_data_8.TempC_SHT,\n                retrieval_data_8_Ts:retrieval_data_8.Timestamp,\n                retrieval_data_9_Hum_SHT:retrieval_data_9.Hum_SHT,\n                retrieval_data_9_TempC_DS:retrieval_data_9.TempC_DS,\n                retrieval_data_9_TempC_SHT:retrieval_data_9.TempC_SHT,\n                retrieval_data_9_Ts:retrieval_data_9.Timestamp,\n                retrieval_data_10_Hum_SHT:retrieval_data_10.Hum_SHT,\n                retrieval_data_10_TempC_DS:retrieval_data_10.TempC_DS,\n                retrieval_data_10_TempC_SHT:retrieval_data_10.TempC_SHT,\n                retrieval_data_10_Ts:retrieval_data_10.Timestamp,\n                retrieval_data_11_Hum_SHT:retrieval_data_11.Hum_SHT,\n                retrieval_data_11_TempC_DS:retrieval_data_11.TempC_DS,\n                retrieval_data_11_TempC_SHT:retrieval_data_11.TempC_SHT,\n                retrieval_data_11_Ts:retrieval_data_11.Timestamp,\n                retrieval_data_12_Hum_SHT:retrieval_data_12.Hum_SHT,\n                retrieval_data_12_TempC_DS:retrieval_data_12.TempC_DS,\n                retrieval_data_12_TempC_SHT:retrieval_data_12.TempC_SHT,\n                retrieval_data_12_Ts:retrieval_data_12.Timestamp,\n                retrieval_data_13_Hum_SHT:retrieval_data_13.Hum_SHT,\n                retrieval_data_13_TempC_DS:retrieval_data_13.TempC_DS,\n                retrieval_data_13_TempC_SHT:retrieval_data_13.TempC_SHT,\n                retrieval_data_13_Ts:retrieval_data_13.Timestamp,\n                retrieval_data_14_Hum_SHT:retrieval_data_14.Hum_SHT,\n                retrieval_data_14_TempC_DS:retrieval_data_14.TempC_DS,\n                retrieval_data_14_TempC_SHT:retrieval_data_14.TempC_SHT,\n                retrieval_data_14_Ts:retrieval_data_14.Timestamp,\n                retrieval_data_15_Hum_SHT:retrieval_data_15.Hum_SHT,\n                retrieval_data_15_TempC_DS:retrieval_data_15.TempC_DS,\n                retrieval_data_15_TempC_SHT:retrieval_data_15.TempC_SHT,\n                retrieval_data_15_Ts:retrieval_data_15.Timestamp,\n                retrieval_data_16_Hum_SHT:retrieval_data_16.Hum_SHT,\n                retrieval_data_16_TempC_DS:retrieval_data_16.TempC_DS,\n                retrieval_data_16_TempC_SHT:retrieval_data_16.TempC_SHT,\n                retrieval_data_16_Ts:retrieval_data_16.Timestamp,\n                retrieval_data_17_Hum_SHT:retrieval_data_17.Hum_SHT,\n                retrieval_data_17_TempC_DS:retrieval_data_17.TempC_DS,\n                retrieval_data_17_TempC_SHT:retrieval_data_17.TempC_SHT,\n                retrieval_data_17_Ts:retrieval_data_17.Timestamp,\n                retrieval_data_18_Hum_SHT:retrieval_data_18.Hum_SHT,\n                retrieval_data_18_TempC_DS:retrieval_data_18.TempC_DS,\n                retrieval_data_18_TempC_SHT:retrieval_data_18.TempC_SHT,\n                retrieval_data_18_Ts:retrieval_data_18.Timestamp,\n                retrieval_data_19_Hum_SHT:retrieval_data_19.Hum_SHT,\n                retrieval_data_19_TempC_DS:retrieval_data_19.TempC_DS,\n                retrieval_data_19_TempC_SHT:retrieval_data_19.TempC_SHT,\n                retrieval_data_19_Ts:retrieval_data_19.Timestamp,\n                retrieval_data_20_Hum_SHT:retrieval_data_20.Hum_SHT,\n                retrieval_data_20_TempC_DS:retrieval_data_20.TempC_DS,\n                retrieval_data_20_TempC_SHT:retrieval_data_20.TempC_SHT,\n                retrieval_data_20_Ts:retrieval_data_20.Timestamp,\n                retrieval_data_21_Hum_SHT:retrieval_data_21.Hum_SHT,\n                retrieval_data_21_TempC_DS:retrieval_data_21.TempC_DS,\n                retrieval_data_21_TempC_SHT:retrieval_data_21.TempC_SHT,\n                retrieval_data_21_Ts:retrieval_data_21.Timestamp,\n                retrieval_data_22_Hum_SHT:retrieval_data_22.Hum_SHT,\n                retrieval_data_22_TempC_DS:retrieval_data_22.TempC_DS,\n                retrieval_data_22_TempC_SHT:retrieval_data_22.TempC_SHT,\n                retrieval_data_22_Ts:retrieval_data_22.Timestamp,\n//\t\t\t\ttime: data.uplink_message.received_at,\n\t\t\t\tcount:data.uplink_message.f_cnt,\n                data_rate: \"SF\" + data.uplink_message.settings.data_rate.lora.spreading_factor + \"BW\" + data.uplink_message.settings.data_rate.lora.bandwidth/1000,\n\t\t\t\ttime: data.uplink_message.received_at,\n//\t\t\t\tgatewayRssi:            rxMeta[0].rssi, \n//                gatewayChannel:         rxMeta[0].channel_index, \n//\t\t        gatewaySNR:             rxMeta[0].snr,\n\t\t        gatewayId: rxMeta[0].gateway_ids.eui\n\t\t\t}\n\t\t});\n\n\t}\n\tfor (var numGWs = 0; numGWs < rxMeta.length; numGWs++) {\n        result.push({\n            deviceName: rxMeta[numGWs].gateway_ids.eui,\n            deviceType: 'gateway', \n            telemetry: {\n                reportingDevice: data.end_device_ids.device_id,\n//\t\t        time: data.uplink_message.received_at,\n\t\t        frequency: parseInt(data.uplink_message.settings.frequency)/1000000, \n\t\t        modulation: \"LORA\",\n\t\t        data_rate: \"SF\" + data.uplink_message.settings.data_rate.lora.spreading_factor + \"BW\" + data.uplink_message.settings.data_rate.lora.bandwidth/1000,\n\t\t        coding_rate: data.uplink_message.settings.coding_rate,\n\t\t        gatewayRssi: rxMeta[numGWs].rssi, \n                gatewayChannel: rxMeta[numGWs].channel_index, \n\t\t        gatewaySNR: rxMeta[numGWs].snr\n\t\t    }\n\t    });\n    }\n\n//Add RSSI and SNR to device telemetry data\nvar rxMeta_radioparam = {};\nfor (var numGWs = 0; numGWs < rxMeta.length; numGWs++) {\n    rxMeta_radioparam['gatewayRssi'+(numGWs+1)] = rxMeta[numGWs].rssi;\n    rxMeta_radioparam['gatewayChannel'+(numGWs+1)] = rxMeta[numGWs].channel_index;\n    rxMeta_radioparam['gatewaySNR'+(numGWs+1)] = rxMeta[numGWs].snr;\n}\nfor (var k in rxMeta_radioparam) {\n    if (typeof result[0].telemetry === \"undefined\") {\n        result[0].telemetry = {};\n    }\n    result[0].telemetry[k] = rxMeta_radioparam[k];\n}\n\nreturn result;\n\n/** Helper functions **/\n\nfunction decodeToString(payload) {\n    return String.fromCharCode.apply(String, payload);\n}\n\nfunction decodeToJson(payload) {\n    // covert payload to string.\n    var str = decodeToString(payload);\n\n    // parse string to JSON\n    var data = JSON.parse(str);\n    return data;\n}\n\n// parse a date in yyyy-mm-dd format\nfunction parseDate(input) {\n  var parts = input.split('-');\n  // new Date(year, month [, day [, hours[, minutes[, seconds[, ms]]]]])\n  return new Date(parts[0], parts[1]-1, parts[2], parts[3], parts[4], parts[5]); // Note: months are 0-based\n}",
      "encoder" : null
    },
    "debugMode" : true,
    "edgeTemplate" : false,
    "externalId" : null,
    "id" : {
      "entityType" : "CONVERTER",
      "id" : "8233ed50-b7dd-11ed-82b3-7f27f2c70179"
    },
    "name" : "Dragino-lht65-Uplink",
    "type" : "UPLINK"
  },
  "relations" : [ ],
  "attributes" : {
    "SERVER_SCOPE" : [ ]
  }
}